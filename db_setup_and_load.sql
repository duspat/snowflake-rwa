ALTER SESSION SET TIMEZONE = 'UTC';

-- Create Database and Schemas to support Medallion architecture
CREATE OR REPLACE DATABASE STORE_DB;

CREATE OR REPLACE TRANSIENT SCHEMA RAW; -- Bronze

CREATE OR REPLACE TRANSIENT SCHEMA STAGING; -- Silver

CREATE OR REPLACE SCHEMA DATA; -- Gold

------------------------------------
--- BACK UP DB
-- CREATE OR REPLACE TRANSIENT DATABASE STORE_DB_BCK;

-- CREATE OR REPLACE SCHEMA STORE_DB_BCK.RAW;

-- -- Back up store sales table since it takes up resource and time to load over again during training
-- CREATE OR REPLACE TABLE STORE_DB_BCK.RAW.STORE_SALES CLONE STORE_DB.RAW.STORE_SALES;

-- -- Restore from backup
-- CREATE OR REPLACE TABLE STORE_DB.RAW.STORE_SALES CLONE STORE_DB_BCK.RAW.STORE_SALES;

------------------------------------


------------------------------------
-- WAREHOUSE FOR MORE COMPUTE
------------------------------------
-- create warehouse for initial load
CREATE OR REPLACE WAREHOUSE LARGE_LOAD_WH
WITH
WAREHOUSE_TYPE = STANDARD
WAREHOUSE_SIZE = LARGE
AUTO_RESUME = TRUE
AUTO_SUSPEND = 60
MIN_CLUSTER_COUNT = 1
MAX_CLUSTER_COUNT = 2
INITIALLY_SUSPENDED = TRUE
SCALING_POLICY = Economy
COMMENT = 'Use only for complex query';

ALTER WAREHOUSE LARGE_LOAD_WH RESUME;
ALTER WAREHOUSE LARGE_LOAD_WH SUSPEND;

------------------------------------


------------------------------------
-- CLEAN UP
------------------------------------
DROP DATABASE IF EXISTS STORE_DB;

DROP DATABASE IF EXISTS STORE_DB_BCK;

DROP WAREHOUSE IF EXISTS LARGE_LOAD_WH;

------------------------------------



----------------------------------
-- BRONZE LAYER - Raw from Source
----------------------------------
-- Bronze Layer: Create the customer raw table by sampling approximately 2 million customers
-- Alternatively you can use "SAMPLE ROW (2000000 ROWS)" if not bothered about deterministic records on rerun
CREATE OR REPLACE TABLE STORE_DB.RAW.CUSTOMER AS
WITH SAMPLE_CUSTOMERS AS (
    SELECT *
    FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.CUSTOMER
    SAMPLE ROW (3) SEED (25)
)
SELECT SC.*, D.D_DATE AS C_CREATED_DATE
FROM SAMPLE_CUSTOMERS SC
LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.DATE_DIM AS D
    ON D.D_DATE_SK = SC.C_FIRST_SALES_DATE_SK
;


-- Bronze Layer: Create the store sales raw table based on the sampled 2 million customers
CREATE OR REPLACE TABLE STORE_DB.RAW.STORE_SALES AS
WITH SAMPLE_CUSTOMERS_SALES AS (
    SELECT SS.*,
        D.D_DATE AS SS_SOLD_DATE,
        CONCAT(CAST(T.T_HOUR AS STRING), ':', CAST(T.T_MINUTE AS STRING), ':', CAST(T.T_SECOND AS STRING)) AS SS_SOLD_TIME
    FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.STORE_SALES SS
    JOIN STORE_DB.RAW.CUSTOMER C ON C.C_CUSTOMER_SK = SS.SS_CUSTOMER_SK
    LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.DATE_DIM AS D
        ON D.D_DATE_SK = SS.SS_SOLD_DATE_SK
    LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.TIME_DIM AS T
        ON T.T_TIME_SK = SS.SS_SOLD_TIME_SK
)
SELECT *
FROM SAMPLE_CUSTOMERS_SALES SAMPLE (1);


-- Bronze Layer: Create the items raw table
CREATE OR REPLACE TABLE STORE_DB.RAW.ITEM AS
SELECT *
FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.ITEM;

-- Bronze Layer: Create the store raw table
CREATE OR REPLACE TABLE STORE_DB.RAW.STORE AS
SELECT S.*, D.D_DATE AS CLOSED_DATE
FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.STORE S
LEFT JOIN SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.DATE_DIM AS D
        ON D.D_DATE_SK = S.S_CLOSED_DATE_SK;


---------------------------------
-- BRONZE LAYER INFO
---------------------------------
SELECT COUNT(*) FROM STORE_DB.RAW.CUSTOMER; -- 1951682
SELECT COUNT(*) FROM STORE_DB.RAW.STORE_SALES; -- 8253370
SELECT COUNT(*) FROM STORE_DB.RAW.ITEM; -- 402000
SELECT COUNT(*) FROM STORE_DB.RAW.STORE; -- 1500

DESC TABLE STORE_DB.RAW.CUSTOMER;
DESC TABLE STORE_DB.RAW.STORE_SALES;
DESC TABLE STORE_DB.RAW.ITEM;
DESC TABLE STORE_DB.RAW.STORE;

SELECT GET_DDL('TABLE', 'STORE_DB.RAW.CUSTOMER');
SELECT GET_DDL('TABLE', 'STORE_DB.RAW.STORE_SALES');
SELECT GET_DDL('TABLE', 'STORE_DB.RAW.ITEM');
SELECT GET_DDL('TABLE', 'STORE_DB.RAW.STORE');
---------------------------------


------------------------------------------
-- SILVER LAYER - Cleaned and Transformed
------------------------------------------
-- Silver Layer: Cleaned and Transformed Customer Data
CREATE OR REPLACE TABLE STORE_DB.STAGING.CUSTOMER AS
SELECT
    C_CUSTOMER_SK AS CUSTOMER_ID,
    C_CUSTOMER_ID AS CUSTOMER_EXT_ID,
    C_FIRST_NAME AS FIRST_NAME,
    MD5(C_EMAIL_ADDRESS) AS EMAIL_ADDRESS_HASH, -- CONSIDER MASKING
    C_LAST_NAME AS LAST_NAME,
    C_PREFERRED_CUST_FLAG AS PREFERRED_CUST_FLAG,
    C_BIRTH_DAY AS BIRTH_DAY,
    C_BIRTH_MONTH AS BIRTH_MONTH,
    C_BIRTH_YEAR AS BIRTH_YEAR,
    C_CREATED_DATE AS CREATED_DATE,
    FALSE AS IS_DELETED,
    MD5(
         COALESCE(C_FIRST_NAME,'')
       || COALESCE(C_LAST_NAME,'')
       || COALESCE(C_EMAIL_ADDRESS,'')
       || COALESCE(C_PREFERRED_CUST_FLAG,'')
       || COALESCE(TO_VARCHAR(C_BIRTH_DAY),'')
       || COALESCE(TO_VARCHAR(C_BIRTH_MONTH),'')
       || COALESCE(TO_VARCHAR(C_BIRTH_YEAR),'')
       || COALESCE(TO_VARCHAR(C_CREATED_DATE),'')
    ) AS ATTRIBUTE_HASH
FROM STORE_DB.RAW.CUSTOMER
WHERE C_CUSTOMER_SK IS NOT NULL;

-- Silver Layer: Cleaned and Transformed Store Sales Data
CREATE OR REPLACE TABLE STORE_DB.STAGING.STORE_SALES AS
SELECT
    SS_TICKET_NUMBER AS TICKET_NUMBER,
    SS_CUSTOMER_SK AS CUSTOMER_ID,
    SS_STORE_SK AS STORE_ID,
    SS_ITEM_SK AS ITEM_ID,
    SS_QUANTITY AS QUANTITY,
    SS_SALES_PRICE AS SALES_PRICE,
    SS_EXT_SALES_PRICE AS EXT_SALES_PRICE,
    SS_COUPON_AMT AS COUPON_AMT,
    SS_NET_PAID AS PAID_AMOUNT,
    SS_SOLD_DATE AS SS_SOLD_DATE,
    CONCAT(CAST(SS_SOLD_DATE AS STRING), ' ', SS_SOLD_TIME)::TIMESTAMP AS SOLD_AT,  -- TIMESTAMP
    FALSE AS IS_DELETED
FROM STORE_DB.RAW.STORE_SALES
WHERE SS_CUSTOMER_SK IS NOT NULL
  AND SS_ITEM_SK IS NOT NULL
  AND SS_SALES_PRICE IS NOT NULL -- EXCLUDE POSSIBLE INVALID SALES
  AND SS_QUANTITY > 0;

-- SELECT * FROM STORE_DB.RAW.STORE_SALES WHERE ss_ticket_number = 87107434;

-- Silver Layer: Cleaned and Transformed Item Data
CREATE OR REPLACE TABLE STORE_DB.STAGING.ITEM AS
SELECT
    I_ITEM_SK AS ITEM_ID,
    I_ITEM_ID AS ITEM_EXT_ID,
    I_PRODUCT_NAME AS PRODUCT_NAME,
    I_CATEGORY AS CATEGORY,
    I_BRAND AS BRAND,
    I_COLOR AS COLOR,
    I_SIZE AS SIZE,
    I_REC_START_DATE AS ADD_DATE,
    I_REC_END_DATE AS DISCONTINUED_DATE,
    FALSE AS IS_DELETED
FROM STORE_DB.RAW.ITEM
WHERE I_ITEM_SK IS NOT NULL;


-- Silver Layer: Cleaned and Transformed Store Data
CREATE OR REPLACE TABLE STORE_DB.STAGING.STORE AS
SELECT
    S_STORE_SK AS STORE_ID,
    S_STORE_ID AS STORE_EXT_ID,
    S_STORE_NAME AS STORE_NAME,
    S_COMPANY_NAME AS STORE_COMPANY_NAME,
    S_CITY AS STORE_CITY,
    S_COUNTY AS STORE_COUNTY,
    S_STATE AS STORE_STATE,
    S_ZIP AS STORE_ZIP,
    S_COUNTRY AS STORE_COUNTRY,
    S_REC_START_DATE AS ADD_DATE,
    S_REC_END_DATE AS DISCONTINUED_DATE,
    FALSE AS IS_DELETED,
    MD5(
         COALESCE(S_STORE_ID,'')
       || COALESCE(S_STORE_NAME,'')
       || COALESCE(S_COMPANY_NAME,'')
       || COALESCE(S_CITY,'')
       || COALESCE(S_COUNTY,'')
       || COALESCE(S_STATE,'')
       || COALESCE(S_ZIP,'')
       || COALESCE(S_COUNTRY,'')
       || COALESCE(TO_VARCHAR(S_REC_START_DATE),'')
       || COALESCE(TO_VARCHAR(S_REC_END_DATE),'')
    ) AS ATTRIBUTE_HASH
FROM STORE_DB.RAW.STORE
WHERE S_STORE_SK IS NOT NULL;


---------------------------------
-- SILVER LAYER INFO
---------------------------------
SELECT COUNT(*) FROM STORE_DB.STAGING.CUSTOMER;
SELECT COUNT(*) FROM STORE_DB.STAGING.STORE_SALES;
SELECT COUNT(*) FROM STORE_DB.STAGING.ITEM;
SELECT COUNT(*) FROM STORE_DB.STAGING.STORE;

DESC TABLE STORE_DB.STAGING.CUSTOMER;
DESC TABLE STORE_DB.STAGING.STORE_SALES;
DESC TABLE STORE_DB.STAGING.ITEM;
DESC TABLE STORE_DB.STAGING.STORE;

SELECT GET_DDL('TABLE', 'STORE_DB.STAGING.CUSTOMER');
SELECT GET_DDL('TABLE', 'STORE_DB.STAGING.STORE_SALES');
SELECT GET_DDL('TABLE', 'STORE_DB.STAGING.ITEM');
SELECT GET_DDL('TABLE', 'STORE_DB.STAGING.STORE');
---------------------------------


----------------------------------
-- GOLD LAYER - Raw from Source
----------------------------------
-- Gold Layer: Customer Dimension Table (DIM_CUSTOMER)
CREATE OR REPLACE TABLE STORE_DB.DATA.DIM_CUSTOMER AS
SELECT
    CUSTOMER_ID,
    CUSTOMER_EXT_ID,
    FIRST_NAME,
    LAST_NAME,
    EMAIL_ADDRESS_HASH,
    PREFERRED_CUST_FLAG,
    BIRTH_DAY,
    BIRTH_MONTH,
    BIRTH_YEAR,
    CREATED_DATE,
    CREATED_DATE::TIMESTAMP AS FROM_DT,
    NULL AS TO_DT,
    TRUE AS CURRENT_FLAG,
    ATTRIBUTE_HASH
FROM STORE_DB.STAGING.CUSTOMER;

-- Gold Layer: Item Dimension Table (DIM_ITEM)
CREATE OR REPLACE TABLE STORE_DB.DATA.DIM_ITEM AS
SELECT
    ITEM_ID,              -- PRIMARY KEY
    ITEM_EXT_ID,
    PRODUCT_NAME,
    CATEGORY,
    BRAND,
    COLOR,
    SIZE,
    ADD_DATE,
    DISCONTINUED_DATE
FROM STORE_DB.STAGING.ITEM;


-- Gold Layer: Store Dimension Table (DIM_STORE)
CREATE OR REPLACE TABLE STORE_DB.DATA.DIM_STORE AS
SELECT
    STORE_ID,             -- PRIMARY KEY
    STORE_EXT_ID,
    STORE_NAME,
    STORE_COMPANY_NAME,
    STORE_CITY,
    STORE_COUNTY,
    STORE_STATE,
    STORE_ZIP,
    STORE_COUNTRY,
    ADD_DATE,
    DISCONTINUED_DATE,
    ADD_DATE::TIMESTAMP AS FROM_DT,
    NULL AS TO_DT,
    TRUE AS CURRENT_FLAG,
    ATTRIBUTE_HASH
FROM STORE_DB.STAGING.STORE;


-- Gold Layer: Fact Table for Sales (FACT_STORE_SALES)
CREATE OR REPLACE TABLE STORE_DB.DATA.FACT_STORE_SALES AS
SELECT
    SS.TICKET_NUMBER,          -- SALES TRANSACTION NUMBER (FACT)
    SS.CUSTOMER_ID,            -- FOREIGN KEY TO DIM_CUSTOMER
    SS.ITEM_ID,                -- FOREIGN KEY TO DIM_ITEM
    SS.STORE_ID,               -- FOREIGN KEY TO DIM_STORE
    SS.QUANTITY,
    SS.SALES_PRICE,
    SS.EXT_SALES_PRICE,
    SS.COUPON_AMT,
    SS.PAID_AMOUNT,
    SS.SOLD_AT,                -- TIMESTAMP OF SALE
    EXTRACT(YEAR FROM SS.SOLD_AT)  AS SALE_YEAR,
    EXTRACT(MONTH FROM SS.SOLD_AT) AS SALE_MONTH,
    EXTRACT(DAY FROM SS.SOLD_AT)   AS SALE_DAY,
    EXTRACT(HOUR FROM SS.SOLD_AT)  AS SALE_HOUR,
    EXTRACT(MINUTE FROM SS.SOLD_AT) AS SALE_MINUTE
FROM STORE_DB.STAGING.STORE_SALES SS
JOIN STORE_DB.DATA.DIM_CUSTOMER C ON SS.CUSTOMER_ID = C.CUSTOMER_ID
JOIN STORE_DB.DATA.DIM_ITEM I ON SS.ITEM_ID = I.ITEM_ID
JOIN STORE_DB.DATA.DIM_STORE S ON SS.STORE_ID = S.STORE_ID;


---------------------------------
-- GOLD LAYER INFO
---------------------------------
SELECT COUNT(*) FROM STORE_DB.DATA.DIM_CUSTOMER;
SELECT COUNT(*) FROM STORE_DB.DATA.DIM_ITEM;
SELECT COUNT(*) FROM STORE_DB.DATA.DIM_STORE;
SELECT COUNT(*) FROM STORE_DB.DATA.FACT_STORE_SALES;

DESC TABLE STORE_DB.DATA.DIM_CUSTOMER;
DESC TABLE STORE_DB.DATA.DIM_ITEM;
DESC TABLE STORE_DB.DATA.DIM_STORE;
DESC TABLE STORE_DB.DATA.FACT_STORE_SALES;

SELECT GET_DDL('TABLE', 'STORE_DB.DATA.DIM_CUSTOMER');
SELECT GET_DDL('TABLE', 'STORE_DB.DATA.DIM_ITEM');
SELECT GET_DDL('TABLE', 'STORE_DB.DATA.DIM_STORE');
SELECT GET_DDL('TABLE', 'STORE_DB.DATA.FACT_STORE_SALES');
---------------------------------